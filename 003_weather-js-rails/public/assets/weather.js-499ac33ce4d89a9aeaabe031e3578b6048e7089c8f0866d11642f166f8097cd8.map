{
  "version": 3,
  "sources": ["../../javascript/weather.js"],
  "sourcesContent": ["document.addEventListener(\"DOMContentLoaded\", () => {\n  const cityInput = document.getElementById(\"city-input\");\n  const weatherDisplay = document.getElementById(\"weather-display\");\n  const weatherMoreInfoDisplay = document.getElementById(\n    \"weather-more-info-display\"\n  );\n  const errorDisplay = document.getElementById(\"error-display\");\n  const errorPopup = document.getElementById(\"error-popup\");\n  const errorMessage = document.getElementById(\"error-message\");\n\n  let weatherData;\n  const selectedInfoTypes = [];\n\n  document\n    .getElementById(\"weather-form\")\n    .addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n\n      const city = cityInput.value.trim();\n\n      if (!city) {\n        handleApiError(\"Enter a correct city\");\n        weatherDisplay.textContent = \"\";\n        return;\n      }\n\n      fetch(`/weather?city=${city}`)\n        .then((response) => {\n          if (response.status === 200) {\n            return response.json();\n          } else {\n            throw new Error(\"Fail to fetch weather data!\");\n          }\n        })\n        .then((data) => {\n          weatherData = data;\n          displayWeather(weatherData);\n          errorDisplay.textContent = \"\";\n          createInfoButtons();\n        })\n        .catch((error) => {\n          handleApiError(error.message);\n        });\n    });\n\n  function displayWeather(data) {\n    if (!data) {\n      handleApiError(\"Weather data is undefined.\");\n      return;\n    }\n\n    const { name, sys, main, weather } = data;\n\n    const weatherHtml = `\n        <div class=\"card bg_blue-dark-color p-3 primary-color\" style=\"width: 18rem;\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title d-flex flex-row\">\n\n            <span class=\"ms-2\">Weather in ${name} in ${sys.country}</spaan>\n            </h5>\n            <p class=\"card-text\"><span class=\"fw-semibold\">Temperature:</span> ${main.temp}\u00B0C</p>\n            <p class=\"card-text\"><span class=\"fw-semibold\">Conditions:</span> ${weather[0].description}</p>\n          </div>\n        </div>\n      `;\n\n    weatherDisplay.innerHTML = weatherHtml;\n    errorDisplay.textContent = \"\";\n  }\n\n  function handleApiError(errorMessage) {\n    showError(errorMessage);\n    weatherDisplay.textContent = \"\";\n  }\n\n  errorPopup.addEventListener(\"click\", hideError);\n\n  document.addEventListener(\"click\", (event) => {\n    if (event.target === errorPopup) {\n      hideError();\n    }\n  });\n\n  function showError(message) {\n    errorMessage.textContent = message;\n    errorPopup.style.display = \"flex\";\n  }\n\n  function hideError() {\n    errorPopup.style.display = \"none\";\n  }\n\n  function createInfoButtons() {\n    console.log(\"Test creation button\");\n    const infoTypesContainer = document.createElement(\"div\");\n    infoTypesContainer.setAttribute(\"id\", \"info-types-container\");\n    infoTypesContainer.classList.add(\"grid\", \"text-center\");\n\n    const infoTypes = [\n      \"Temperature min\",\n      \"Temperature max\",\n      \"Humidity\",\n      \"Wind Speed\",\n      \"Sunrise\",\n      \"Sunset\",\n      \"Pressure\",\n      \"Longitude\",\n      \"Latitude\",\n      \"Clouds\",\n    ];\n\n    infoTypes.forEach((infoType) => {\n      const infoButton = document.createElement(\"button\");\n      infoButton.classList.add(\n        \"btn\",\n        \"btn-outline-secondary\",\n        \"m-2\",\n        \"p-2\",\n        \"g-col-6\",\n        \"g-col-md-4\"\n      );\n      infoButton.textContent = infoType;\n      infoButton.addEventListener(\"click\", () => {\n        console.log(\"Test btn\");\n        addInfoType(infoType, infoButton);\n      });\n      infoTypesContainer.append(infoButton);\n    });\n    weatherMoreInfoDisplay.innerHTML = \"\";\n    weatherMoreInfoDisplay.append(infoTypesContainer);\n  }\n\n  function addInfoType(infoType, infoButton) {\n    if (!selectedInfoTypes.includes(infoType)) {\n      selectedInfoTypes.push(infoType);\n      infoButton.style.display = \"none\";\n      displaySelectedInfo();\n    }\n  }\n\n  const selectedInfoContainer = document.createElement(\"div\");\n  selectedInfoContainer.setAttribute(\"id\", \"selected-info-container\");\n  selectedInfoContainer.classList.add(\n    \"card\",\n    \"bg_blue-dark-color\",\n    \"p-3\",\n    \"primary-color\",\n    \"mt-3\",\n    \"mx-auto\"\n  );\n  selectedInfoContainer.style.width = \"18rem\";\n  const card_body = document.createElement(\"div\");\n  card_body.classList.add(\"card-body\");\n  selectedInfoContainer.append(card_body);\n  const selectedInfoList = document.createElement(\"ul\");\n  selectedInfoList.classList.add('list-unstyled');\n  card_body.appendChild(selectedInfoList);\n\n  function displaySelectedInfo() {\n    selectedInfoList.innerHTML = \"\";\n    selectedInfoTypes.forEach((infoType) => {\n      const infoText = getInfoText(infoType);\n      if (infoText) {\n        const listItem = document.createElement(\"li\");\n        listItem.classList.add(\"card-text\", \"my-2\", \"fw-semibold\");\n        listItem.textContent = infoText;\n\n        selectedInfoList.appendChild(listItem);\n      }\n    });\n    weatherMoreInfoDisplay.appendChild(selectedInfoContainer);\n\n  }\n\n  function getInfoText(infoType) {\n    switch (infoType) {\n      case \"Temperature min\":\n        return `Temperature min: ${weatherData.main.temp_min}\u00B0C`;\n      case \"Temperature max\":\n        return `Temperature max: ${weatherData.main.temp_max}\u00B0C`;\n      case \"Humidity\":\n        return `Humidity: ${weatherData.main.humidity}%`;\n      case \"Wind Speed\":\n        return `Wind Speed: ${weatherData.wind.speed} m/s`;\n      case \"Sunrise\":\n        return `Sunrise: ${new Date(\n          weatherData.sys.sunrise * 1000\n        ).toLocaleTimeString()}`;\n      case \"Sunset\":\n        return `Sunset: ${new Date(\n          weatherData.sys.sunset * 1000\n        ).toLocaleTimeString()}`;\n      case \"Pressure\":\n        return `Pressure: ${weatherData.main.pressure}`;\n      case \"Longitude\":\n        return `Longitude: ${weatherData.coord.lon}`;\n      case \"Latitude\":\n        return `Latitude: ${weatherData.coord.lat}`;\n      case \"Rain\":\n        return `Clouds: ${weatherData.clouds.all} %`;\n      default:\n        return \"\";\n    }\n  }\n});\n"],
  "mappings": "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",
  "names": ["errorMessage"]
}
