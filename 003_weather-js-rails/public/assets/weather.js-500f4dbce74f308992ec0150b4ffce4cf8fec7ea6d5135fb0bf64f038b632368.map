{
  "version": 3,
  "sources": ["../../javascript/weather.js"],
  "sourcesContent": ["document.addEventListener(\"DOMContentLoaded\", () => {\n  const cityInput = document.getElementById(\"city-input\");\n  const weatherDisplay = document.getElementById(\"weather-display\");\n  const errorDisplay = document.getElementById(\"error-display\");\n  const errorPopup = document.getElementById(\"error-popup\");\n  const errorMessage = document.getElementById(\"error-message\");\n\n  let weatherData;\n  let map;\n\n  document\n    .getElementById(\"weather-form\")\n    .addEventListener(\"submit\", (event) => {\n      event.preventDefault();\n\n      const city = cityInput.value.trim();\n\n      if (!city) {\n        handleApiError(\"Enter a correct city\");\n        weatherDisplay.textContent = \"\";\n        return;\n      }\n\n      // Fetch location data from your Rails backend\n      fetch(`/location?city=${city}`)\n        .then((response) => {\n          if (response.status === 200) {\n            return response.json();\n          } else {\n            throw new Error(\"Failed to fetch location data!\");\n          }\n        })\n        .then((locationData) => {\n          fetchWeatherData(city) // Fetch weather data\n            .then((data) => {\n              weatherData = data;\n              displayWeatherAndMap(weatherData, locationData);\n              errorDisplay.textContent = \"\";\n              appendInfoButton();\n            })\n            .catch((error) => {\n              handleApiError(error.message);\n            });\n        })\n        .catch((error) => {\n          handleApiError(error.message);\n        });\n    });\n\n  function fetchWeatherData(city) {\n    return fetch(`/weather?city=${city}`)\n      .then((response) => {\n        if (response.status === 200) {\n          return response.json();\n        } else {\n          throw new Error(\"Failed to fetch weather data!\");\n        }\n      });\n  }\n\n  function displayWeatherAndMap(weatherData, locationData) {\n    if (!weatherData) {\n      handleApiError(\"Weather data is missing.\");\n      return;\n    }\n\n    const { name, sys, main, weather } = weatherData;\n\n    const weatherHtml = `\n      <div class=\"card bg_blue-dark-color p-3 primary-color\" style=\"width: 18rem;\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title d-flex flex-row\">\n            <span class=\"ms-2\">Weather in ${name} in ${sys.country}</span>\n          </h5>\n          <p class=\"card-text\"><span class=\"fw-semibold\">Temperature:</span> ${main.temp}\u00B0C</p>\n          <p class=\"card-text\"><span class=\"fw-semibold\">Conditions:</span> ${weather[0].description}</p>\n        </div>\n      </div>\n      <div class=\"card bg_blue-dark-color p-3 primary-color\" style=\"width: 18rem;\">\n        <div class=\"card-body\" id=\"map-container\">\n          <div id=\"map\"></div>\n        </div>\n      </div>\n    `;\n\n    weatherDisplay.innerHTML = weatherHtml;\n    errorDisplay.textContent = \"\";\n\n    // Initialize the map using location data\n    initializeMap(locationData);\n  }\n\n  function initializeMap(locationData) {\n    if (!locationData || !locationData.features || locationData.features.length === 0) {\n      console.error('Location data is missing or invalid.');\n      return;\n    }\n\n    const coordinates = locationData.features[0].center;\n\n    // Initialize the Mapbox map\n    mapboxgl.accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN'; // Replace with your actual Mapbox access token\n    map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: coordinates,\n      zoom: 10,\n    });\n  }\n\n  function handleApiError(errorMessage) {\n    showError(errorMessage);\n    weatherDisplay.textContent = \"\";\n  }\n\n  errorPopup.addEventListener(\"click\", hideError);\n\n  document.addEventListener(\"click\", (event) => {\n    if (event.target === errorPopup) {\n      hideError();\n    }\n  });\n\n  function showError(message) {\n    errorMessage.textContent = message;\n    errorPopup.style.display = \"flex\";\n  }\n\n  function hideError() {\n    errorPopup.style.display = \"none\";\n  }\n\n  function appendInfoButton() {\n    const infoButton = document.createElement(\"button\");\n    infoButton.textContent = \"+\";\n    infoButton.id = \"info-button\";\n    infoButton.classList.add(\"btn\", \"btn-light\", \"mt-3\");\n\n    infoButton.addEventListener(\"click\", () => {\n      displayMoreInfo(weatherData);\n    });\n\n    weatherDisplay.appendChild(infoButton);\n  }\n\n  function displayMoreInfo(data) {\n    if (!data) {\n      errorDisplay.textContent = \"Weather data is undefined.\";\n      return;\n    }\n\n    const { main, wind, sys } = data;\n    const moreInfoHtml = `\n      <div class=\"card bg_blue-dark-color p-3 primary-color mt-3\" style=\"width: 18rem;\">\n        <div class=\"card-body\">\n          <p class=\"card-text\"><span class=\"fw-semibold\">Humidity:</span> ${main.humidity}%</p>\n          <p class=\"card-text\"><span class=\"fw-semibold\">Wind Speed:</span> ${wind.speed} m/s</p>\n          <p class=\"card-text\"><span class=\"fw-semibold\">Sunrise:</span> ${new Date(sys.sunrise * 1000).toLocaleTimeString()}</p>\n          <p class=\"card-text\"><span class=\"fw-semibold\">Sunset:</span> ${new Date(sys.sunset * 1000).toLocaleTimeString()}</p>\n        </div>\n      </div>\n    `;\n\n    const moreInfoContainer = document.createElement(\"div\");\n    moreInfoContainer.innerHTML = moreInfoHtml;\n    weatherDisplay.appendChild(moreInfoContainer);\n    document.getElementById(\"info-button\").style.display = \"none\";\n  }\n});\n"],
  "mappings": "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",
  "names": ["weatherData", "errorMessage"]
}
